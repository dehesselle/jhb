# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

name: release
on:
  push:   # only run for tags
    tags:
      - 'v*'

# This workflow is meant to create releases. It checks some basic requirements
# and then calls the 'build' workflow to do the work. Afterwards a release
# is drafted with the produced artifact.

jobs:

################################################################################

  check_requirements:
    runs-on: macos-12
    steps:

      - name: checkout jhb repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: fail on missing version tag
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/github-script@v3
        with:
          script: core.setFailed("version tag not found")

      - name: get jhb version
        id: jhb
        env:
          SYS_IGNORE_USR_LOCAL: true
        run: |
          source etc/jhb.conf/version.sh
          echo "::set-output name=version::$VERSION"

      - name: get version tag
        id: tag
        run: echo "::set-output name=version::${GITHUB_REF##*v}"

      # Once we have established that the jhb version (version.sh)
      # matches the git tag we can safely rely on the tag from here on.
      - name: fail on version mismatch
        if: ${{ !endsWith(github.ref, steps.jhb.outputs.version) }}
        uses: actions/github-script@v3
        with:
          script: core.setFailed("version tag mismatch")

################################################################################

  call_build:
    uses: ./.github/workflows/build.yml
    with:
      SDK_DOWNLOAD_URL_REQUIRED: true
    secrets:
      SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
    needs: check_requirements

################################################################################

  create_release:
    runs-on: macos-12
    needs: call_build
    env:
      WRK_DIR: /Users/Shared/work
    steps:

    #--------------------------------------------------- prepare the environment

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: jhb_archive

      - name: download artifact checksum
        uses: actions/download-artifact@v3
        with:
          name: jhb_archive_sha256

      - name: get jhb info
        id: jhb
        run: |
          source etc/jhb.conf.sh
          echo "::set-output name=archive::$RELEASE_ARCHIVE"

    #------------------------------------------------------------ create release

      - name: create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: jhb ${{ github.ref }}
          draft: true
          prerelease: false

      - name: upload archive to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ steps.jhb.outputs.archive }}
          asset_name: ${{ steps.jhb.outputs.archive }}
          asset_content_type: application/octet-stream

      - name: upload toolset checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ steps.jhb.outputs.archive }}.sha256
          asset_name: ${{ steps.jhb.outputs.archive }}.sha256
          asset_content_type: text/plain
