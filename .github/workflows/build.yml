# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

name: build
on:
  push:   # do not run when pushing tags
    branches:
      - '*'
  workflow_call:
    inputs:
      SDK_DOWNLOAD_URL_REQUIRED:
        description: "If set to true, break the build on missing SDK_DOWNLOAD_URL."
        default: false
        required: false
        type: boolean
    secrets:
      SDK_DOWNLOAD_URL:
        required: false

# This workflow is about running 'usr/bin/bootstrap' and creating an archive of
# built software. All other steps are basically preparations.

jobs:

  build:
    runs-on: macos-11
    env:
      WRK_DIR: /Users/Shared/work
      CCACHE_DIR: /Users/Shared/work/ccache
    steps:

      #------------------------------------------------- prepare the environemnt

      - name: checkout jhb repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: create cache id
        id: cache_id
        uses: nanzm/get-time-action@v1.1
        with:
          format: "YYYY-MM-DD-HH-mm-ss"

      # Create a new cache, building ontop the most recent old one.
      - name: setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-jhb-${{ steps.cache_id.outputs.time }}
          restore-keys: ccache-jhb-

      # GitHub does not provide 10.13 SDK on their runners and no image older
      # than Catalina. See here for what you can expect in their images:
      # https://github.com/actions/virtual-environments/tree/main/images/macos
      #
      # Official downloads from Apple are not accessible without a developer
      # account and I don't trust 3rd party sources (e.g. "phracker"). So I'm
      # using my own (non-public) source, but I'm providing the means to verify
      # its genuinity, see here:
      # https://github.com/dehesselle/sdkchecksum
      #
      # In order to use your custom SDK_DOWNLOAD_URL, create a repository secret
      # of said name and proivide a link to a .tar.xz file.
      # At the moment, only 10.13.4 SDK is supported as it's hardcoded below.

      # Using SDK is mandatory if building for a release.
      - name: fail on missing secret SDK_DOWNLOAD_URL
        if: |
          env.SDK_DOWNLOAD_URL == null &&
          inputs.SDK_DOWNLOAD_URL_REQUIRED
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        uses: actions/github-script@v3
        with:
          script: core.setFailed("SDK_DOWNLOAD_URL secret not found")

      - name: install macOS SDK
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        run: |
          mkdir -p $WRK_DIR
          curl --http1.1 -L ${{ secrets.SDK_DOWNLOAD_URL }} | tar -C $WRK_DIR -xJp
          echo "SDKROOT=$WRK_DIR/$(basename ${SDK_DOWNLOAD_URL%%.tar.xz*})" >> $GITHUB_ENV

      # Checkout repository to verify SDK...
      - name: checkout sdkchecksum repository
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        uses: actions/checkout@v3
        with:
          repository: dehesselle/sdkchecksum
          path: sdkchecksum
          clean: false

      # ...and use it to verify
      - name: verify SDK
        if: env.SDK_DOWNLOAD_URL != null
        env:
          SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
        run: |
          shasum -a 256 sdkchecksum/MacOSX10.13.4.sdk.sha256
          cd $WRK_DIR
          if shasum -s -c $GITHUB_WORKSPACE/sdkchecksum/MacOSX10.13.4.sdk.sha256; then
            echo "ok - SDK verified"
            rm -rf $GITHUB_WORKSPACE/sdkchecksum
            exit 0
          else
            echo "error - SDK verification failed"
            exit 1
          fi

      # GitHub does not provide a clean macOS installation. We need to move the
      # pre-installed components out of the way so we don't pick them up by
      # accident.
      - name: disable /usr/local
        run: |
          cd /usr/local
          for dir in include lib share; do sudo mv $dir $dir.disabled; done

      #------------------------------------------------------------------- build

      - name: bootstrap JHBuild
        run: usr/bin/bootstrap

      - name: remove non-essential files
        run: |
          source etc/jhb.conf.sh
          find "$SRC_DIR" -mindepth 1 -maxdepth 1 -type d ! -name bash_d ! -name "jhb*" -exec rm -rf {} \;
          rm -rf "$VAR_DIR"/build/*
          rm -rf "$VAR_DIR"/cache/pip/*
          rm -rf "$VAR_DIR"/cache/pycache/*
          rm -rf "${TMP_DIR:?}"/*

      - name: create archive
        id: jhb
        run: |
          usr/bin/archive create_tar
          source etc/jhb.conf.sh
          echo "::set-output name=archive::$RELEASE_ARCHIVE"

      #-------------------------------------------------------- upload artifacts

      # Restore /usr/local, GitHub actions depend on these.
      - name: restore /usr/local
        run: for dir in /usr/local/*.disabled; do sudo mv $dir ${dir/.disabled/}; done

      - name: upload archive
        uses: actions/upload-artifact@v3
        with:
          name: jhb_archive
          path: ${{ steps.jhb.outputs.archive }}

      - name: upload archive checksum
        uses: actions/upload-artifact@v3
        with:
          name: jhb_archive_sha256
          path: ${{ steps.jhb.outputs.archive }}.sha256
