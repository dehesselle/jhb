#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2022 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

### description ################################################################

# This is a hHelper script to create and remove ramdisk overlays.

### shellcheck #################################################################

# Nothing here.

### dependencies ###############################################################

#------------------------------------------------------ source jhb configuration

source "$(dirname "${BASH_SOURCE[0]}")"/../../etc/jhb.conf.sh

#------------------------------------------- source common functions from bash_d

# bash_d is already available (it's part of jhb configuration)

bash_d_include error

### variables ##################################################################

# Nothing here.

### functions ##################################################################

function destroy_overlay
{
  while :; do # unmount everything, in reverse order
    local disk
    disk=$(
      diskutil list |
        grep "$RELEASE_OVERLAY" |
        tail -n1 |
        awk '{ print $NF }'
    )

    if [ ${#disk} -eq 0 ]; then
      break # nothing to do here
    else
      # We loop over the 'eject' since it occasionally timeouts.
      while ! diskutil eject "$disk" >/dev/null; do
        echo_w "retrying to eject $disk in 5 seconds"
        sleep 5
      done

      echo_i "ejected $disk"
    fi
  done
}

function create_overlay
{
  local overlay_size=$1

  overlay_size=${overlay_size:-1} # unit GiB, default 1

  # create writable overlay
  local device
  device=$(
    hdiutil attach -nomount ram://$((overlay_size * 1024 * 2048)) | xargs
  )
  newfs_hfs -v "$RELEASE_OVERLAY" "$device" >/dev/null
  echo_i "$overlay_size GiB ram attached to $device"
  diskutil mount -mountOptions nobrowse,rw,union -mountPoint "$VER_DIR" "$device"
  echo_i "$device union-mounted at $VER_DIR"

  # macOS' versions of 'ls' or 'find' only see items from the top layer,
  # and that is empty right now. In order to be able to write into arbitrary
  # locations within the top layer, we need to recreate the directory structure
  # from the bottom layer first. Luckily for us, we can use GNU find as it
  # does see the files and directories from the bottom layer.
  echo_i "setting up directories in overlay"
  gfind "$VER_DIR" -mindepth 1 -type d \
    ! -path "$BLD_DIR/*" ! -path "$SRC_DIR/*" \
    -exec echo "mkdir {}" \; >"$VER_DIR"/create_dirs.sh
  chmod 755 "$VER_DIR"/create_dirs.sh
  "$VER_DIR"/create_dirs.sh
  rm "$VER_DIR"/create_dirs.sh
}

### main #######################################################################

error_trace_enable

case "$1" in
  create)
    destroy_overlay
    create_overlay "$2"
    ;;
  destroy)
    destroy_overlay
    ;;
  *)
    echo_e "usage: $0 {create|destroy} {size in GiB}"
    exit 1
    ;;
esac
