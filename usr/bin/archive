#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

### description ################################################################

# This is a helper to create release archives and mount them.

### shellcheck #################################################################

# Nothing here.

### dependencies ###############################################################

#------------------------------------------------------ source jhb configuration

source "$(dirname "${BASH_SOURCE[0]}")"/../../etc/jhb.conf.sh

#------------------------------------------- source common functions from bash_d

# bash_d is already available (it's part of jhb configuration)

bash_d_include error

### variables ##################################################################

SELF_DIR=$(
  cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1
  pwd
)

### functions ##################################################################

# shellcheck disable=SC2120 # optinal arguments
function create_tar
{
  local suffix=$1 # optional

  local file
  file=$ARTIFACT_DIR/$(release_archive_get_name)$suffix.tar.xz

  echo_i "creating $file"

  tar -C "$WRK_DIR" -cp "$(basename "$VER_DIR")" |
    XZ_OPT=-T0 "$BIN_DIR"/xz >"$file"

  shasum -a 256 "$file" >"$file".sha256
  echo_i "sha256 = $(awk '{ print $1 }' "$file".sha256)"

  echo "$file"
}

# shellcheck disable=SC2120 # optinal arguments
function create_dmg
{
  local suffix=$1 # optional

  local file
  file=$ARTIFACT_DIR/$(release_archive_get_name)$suffix.dmg

  ( # create dmg
    local vol_name
    vol_name=$(basename "$VER_DIR")

    cd "$WRK_DIR" || exit 1
    hdiutil create -fs HFS+ -ov -format UDBZ \
      -srcfolder "$vol_name" \
      -volname "$vol_name" \
      "$file" \
      >/dev/null
  )

  ( # create and print checksum
    cd "$(dirname "$file")" || exit 1
    shasum -a 256 "$(basename "$file")" >"$file".sha256
    echo_i "sha256 = $(awk '{ print $1 }' "$file".sha256)"
  )

  echo "$file"
}

function mount_dmg
{
  local file=$REP_DIR/$RELEASE_ARCHIVE
  local mountpoint=$VER_DIR

  if [ ! -d "$mountpoint" ]; then
    mkdir -p "$mountpoint"
  fi

  echo_i "mounting $(basename "$file") may take some time"
  local device
  device=$(hdiutil attach -nomount "$file" | grep "^/dev/disk" |
    grep "Apple_HFS" | awk '{ print $1 }')
  echo_i "$file attached to $device"
  mount -o nobrowse,noowners,noquarantine,ro -t hfs "$device" "$mountpoint"
  echo_i "$device mounted to $mountpoint"
}

function unmount_dmg
{
  local mountpoint=$VER_DIR

  while :; do # unmount everything (in reverse order)
    local disk
    disk=$(mount | grep "$mountpoint" | tail -n1 | awk '{ print $1 }')
    disk=${disk%s[0-9]} # cut off slice specification

    if [ ${#disk} -eq 0 ]; then
      break # nothing to do here
    else
      # We loop over the 'eject' since it occasionally timeouts.
      while ! diskutil eject "$disk" >/dev/null; do
        echo_w "retrying to eject $disk in 5 seconds"
        sleep 5
      done

      echo_i "ejected $disk"
    fi
  done
}

function download_dmg
{
  if [ ! -d "$REP_DIR" ]; then
    mkdir -p "$REP_DIR"
  fi

  for url in "${RELEASE_URLS[@]}"; do
    local partial_download=$REP_DIR/${FUNCNAME[0]} # TMP_DIR not available yet
    # download (at least) 100 kb of data
    curl -L "$url" 2>/dev/null | head -c 100000 >"$partial_download"
    # if we got 100 kb, it's not a "404 file not found"
    if [ "$(stat -f%z "$partial_download")" -eq 100000 ]; then
      echo_i "downloading $url"
      curl -o "$REP_DIR/$RELEASE_ARCHIVE" -L -C - "$url"
      break
    fi
  done

  rm "$partial_download"
}

function install_dmg
{
  local overlay_size=${1:-1} # unit GiB, default 1

  local file=$REP_DIR/$RELEASE_ARCHIVE

  # download and mount read-only disk image
  if [ -f "$file" ]; then
    echo_i "using $file"
  else
    download_dmg
  fi
  mount_dmg

  "$SELF_DIR"/overlay create "$overlay_size"
}

function uninstall_dmg
{
  "$SELF_DIR"/overlay destroy
  unmount_dmg
}

function remove_nonessential_files
{
  find "$SRC_DIR" -mindepth 1 -maxdepth 1 -type d \
    ! -name bash_d ! -name "jhb*" -exec rm -rf {} \;
  rm -rf "$VAR_DIR"/build/*
  rm -rf "$VAR_DIR"/cache/pip/*
  rm -rf "$VAR_DIR"/cache/pycache/*
  rm -rf "${TMP_DIR:?}"/*
}

function main
{
  local command=$1
  local option=$2

  case "$command" in
    create_dmg)
      create_dmg
      ;;
    create_tar)
      create_tar "$option" # option: add suffix to archive, default is none
      ;;
    install_dmg)
      install_dmg "$option" # option: overlay size in GiB, default is 1
      ;;
    uninstall_dmg)
      uninstall_dmg
      ;;
    remove_nonessentials)
      remove_nonessential_files
      ;;
    *)
      echo_e "usage: $0 {create_dmg|create_tar|install_dmg|uninstall_dmg|\
remove_nonessentials}"
      ;;
  esac
}

### main #######################################################################

error_trace_enable

main "$@"
