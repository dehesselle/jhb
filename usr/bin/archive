#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

### description ################################################################

# This is a helper to create release archives and mount them.

### shellcheck #################################################################

# Nothing here.

### dependencies ###############################################################

#------------------------------------------------------ source jhb configuration

source "$(dirname "${BASH_SOURCE[0]}")"/../../etc/jhb.conf.sh

#------------------------------------------- source common functions from bash_d

# bash_d is already available (it's part of jhb configuration)

bash_d_include error

### variables ##################################################################

SHADOW_FILE=${CI_PROJECT_DIR:-$WRK_DIR}/$RELEASE_ARCHIVE.shadow

### functions ##################################################################

# shellcheck disable=SC2120 # optional arguments
function create_tar
{
  local suffix=$1 # optional

  local file
  file=$ART_DIR/$(release_archive_get_name)$suffix.tar.xz

  echo_i "creating $file"

  tar -C "$WRK_DIR" \
      --exclude="$(basename "$TMP_DIR")"/?* \
      -cp "$(basename "$VER_DIR")" |
    XZ_OPT=-T0 "$BIN_DIR"/xz >"$file"

  shasum -a 256 "$file" >"$file".sha256
  echo_i "sha256 = $(awk '{ print $1 }' "$file".sha256)"

  echo "$file"
}

# shellcheck disable=SC2120 # optional arguments
function create_dmg
{
  local file
  file=$ART_DIR/$(release_archive_get_name).dmg

  ( # create dmg
    local vol_name
    vol_name=$(basename "$VER_DIR")

    cd "$WRK_DIR" || exit 1
    hdiutil create -ov \
      -fs HFS+ \
      -format ULMO \
      -size 16g \
      -srcfolder "$vol_name" \
      -volname "$vol_name" \
      "$file" \
      >/dev/null
  )

  ( # create and print checksum
    cd "$(dirname "$file")" || exit 1
    shasum -a 256 "$(basename "$file")" >"$file".sha256
    echo_i "sha256 = $(awk '{ print $1 }' "$file".sha256)"
  )

  echo "$file"
}

function mount_dmg
{
  local file=$REP_DIR/$RELEASE_ARCHIVE

  if [ ! -d "$VER_DIR" ]; then
    mkdir -p "$VER_DIR"
  fi

  if [ -f "$SHADOW_FILE".bz2 ]; then
    echo_i "decompressiong $SHADOW_FILE.bz2 ..."
    bzip2 -d "$SHADOW_FILE".bz2
  fi

  echo_i "mounting $(basename "$file") ..."
  hdiutil mount "$file" \
    -mountPoint "$VER_DIR" \
    -shadow "$SHADOW_FILE"
}

function unmount_dmg
{
  local keep_shadow_file=$1

  if hdiutil info | grep "$RELEASE_ARCHIVE"; then
    echo_i "unmounting $VER_DIR"
    # We loop over the 'eject' since it occasionally timeouts.
    while ! hdiutil detach "$VER_DIR" >/dev/null; do
      echo_w "retrying to detach $VER_DIR in 10 seconds"
      sleep 10
    done

    case "$keep_shadow_file" in
      keep)
        echo_i "keeping $SHADOW_FILE"
        ;;
      archive)
        echo_i "archiving $SHADOW_FILE ..."
        bzip2 "$SHADOW_FILE"
        ;;
      *)
        echo_i "removing $SHADOW_FILE"
        rm "$SHADOW_FILE"
        ;;
    esac
  else
    echo_i "nothing to unmount"
  fi
}

function download_dmg
{
  if [ ! -d "$REP_DIR" ]; then
    mkdir -p "$REP_DIR"
  fi

  for url in "${RELEASE_URLS[@]}"; do
    local partial_download=$REP_DIR/${FUNCNAME[0]} # TMP_DIR not available yet
    # download (at least) 100 kb of data
    curl -L "$url" 2>/dev/null | head -c 100000 >"$partial_download"
    # if we got 100 kb, it's not a "404 file not found"
    if [ "$(stat -f%z "$partial_download")" -eq 100000 ]; then
      echo_i "downloading $url"
      curl -o "$REP_DIR/$RELEASE_ARCHIVE" -L -C - "$url"
      break
    fi
  done

  rm "$partial_download"
}

function install_dmg
{
  local file=$REP_DIR/$RELEASE_ARCHIVE

  # download and mount read-only disk image
  if [ -f "$file" ]; then
    echo_i "using $file"
  else
    download_dmg
  fi
  mount_dmg
}

function uninstall_dmg
{
  local keep_shadow_file=$1   # optional

  unmount_dmg "$keep_shadow_file"
}

function remove_nonessential_files
{
  local additional_dirs=$1  # optional

  for dir in $BLD_DIR $PIP_CACHE_DIR $PKG_DIR $PYTHONPYCACHEPREFIX \
             $SRC_DIR $TMP_DIR $additional_dirs; do
    dir=$(eval echo "$dir") # allow variable resolution for additional_dirs

    if [[ $dir != $VER_DIR/* ]]; then
      # this is a precaution: do not touch things outside our tree
      echo_i "skipping $dir: not below VER_DIR"
      continue
    fi

    if [ -f "$dir/.skip" ]; then
      echo_i "skipping $dir: .skip was found"  # skip over marked directories
      continue
    fi

    while IFS= read -r -d "" object; do
      if [ "$(basename "$object")" = ".keep" ]; then
        continue  # do not remove the "keep"-list itself
      fi
      if ! grep "$(basename "$object")" "$(dirname "$object")/.keep" \
          -q 2>/dev/null; then
        rm -rf "${object:?}"
      else
        echo_i "keeping $object"
      fi
    done < <(find "$dir" -maxdepth 1 -mindepth 1 -print0)
  done
}

function main
{
  local command=$1
  local option=$2

  case "$command" in
    create_dmg)
      create_dmg
      ;;
    create_tar)
      create_tar "$option" # option: add suffix to archive, default is none
      ;;
    install_dmg)
      install_dmg
      ;;
    uninstall_dmg)
      uninstall_dmg "$option"
      ;;
    remove_nonessentials)
      remove_nonessential_files "$option" # option: additional dirs to clean up
      ;;
    *)
      echo_e "usage: $0 {create_dmg|create_tar|install_dmg|uninstall_dmg|\
remove_nonessentials}"
      ;;
  esac
}

### main #######################################################################

error_trace_enable

main "$@"
